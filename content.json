{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"http://example.com","root":"/"},"pages":[{"title":"404","date":"2021-10-03T14:06:06.000Z","updated":"2021-10-03T14:06:06.686Z","comments":true,"path":"404/index.html","permalink":"http://example.com/404/index.html","excerpt":"","text":""},{"title":"search","date":"2021-10-03T14:05:56.000Z","updated":"2021-10-03T14:05:56.103Z","comments":true,"path":"search/index.html","permalink":"http://example.com/search/index.html","excerpt":"","text":""}],"posts":[{"title":"php学习","slug":"php学习","date":"2021-10-09T11:06:05.000Z","updated":"2021-10-15T11:55:43.686Z","comments":true,"path":"2021/10/09/php学习/","link":"","permalink":"http://example.com/2021/10/09/php%E5%AD%A6%E4%B9%A0/","excerpt":"","text":"PHP学习笔记php官方使用手册：PHP: PHP 手册 - Manual 学习参考：PHP 教程 | 菜鸟教程 (runoob.com) 起始输入php的起始包括符为 echo 指令输入、输出 指令，echo+空格+’输入内容’ 进行输入 例如 echo &#39;Hollw Word&#39; ; 如果想要一次输入多组内容则需要用 空格+.+空格 的形式连接内容 例如 echo &#39;Hollw Word&#39; . &quot;$x&quot;; echo &quot;&lt;br&gt;&quot;可完成换行的操作 注释注释是对于程序的解释，对于 复杂 程序的日后维护、升级、迭代有重要的意义。 单行注释可为 // +内容或 #+内容 多行注释为 /* +内容+ */ 变量与代数类似，可以给 PHP 变量赋予某个值（x=5）或者表达式（z=x+y）。 变量可以是很短的名称（如 x 和 y）或者更具描述性的名称（如 age、carname、totalvolume）。 PHP 变量规则： 变量以 $ 符号开始，后面跟着变量的名称 变量名必须以字母或者下划线字符开始 变量名只能包含字母、数字以及下划线（A-z、0-9 和 _ ） 变量名不能包含空格 变量名是区分大小写的（$y 和 $Y 是两个不同的变量） &lt;1&gt;通过$ +变量名（可以是字母、数字、下划线，但数字不能单独开头作变量）+=定义量 $name=&#39;定义量&#39;; 特性：(1)若定义如 $b =&amp;$a 时，程序并未开辟新变量，而是直接引用旧变量 (2)可连续使用$$来将已有的变量变为可变变量（类似套娃，作用以后会用到） &lt;2&gt;检测变量 var_dump(isset($变量名));用来查找变量是否已被定义 &lt;3&gt;删除变量 unset($变量名); &lt;4&gt;static 声明的变量只会执行一次，值存放在内存当中 &lt;5&gt;PHP 语句和 PHP 变量都是区分大小写的 &lt;6&gt;PHP 是一门弱类型语言 &lt;7&gt;在所有函数外部定义的变量，拥有全局作用域。除了函数外，全局变量可以被脚本中的任何部分访问，要在一个函数中访问一个全局变量，需要使用 global 关键字 &lt;8&gt;在 PHP 函数内部声明的变量是局部变量，仅能在函数内部访问 &lt;9&gt;在不同函数中使用相同的变量名称，因为这些函数内定义的变量名是局部变量，只作用于该函数内 超级全局变量:待补充 函数转换进制八转十 octdec(八进制) 十六转十 hexdec (&#39;十六进制&#39;) 更多函数使用手册来查询。 Boolean 类型是指在PHP中的一种规定好的判断类型，正确与错误，很简单但很实用 字符串字符串变量用于存储并处理文本 在创建字符串之后，我们就可以对它进行操作了。您可以直接在函数中使用字符串，或者把它存储在变量中 字符串转义：通过在已有某种意义的字符前加上 \\使字符正常输出 换行(1)echo &#39;&lt;hr/&gt;&#39;; (2)在输出字符中加入\\t效果类似空格 (3)在输出字符中加入\\n可实现在在输出一段字符中换行 字符串定界定义变量后在等号后加 &lt;&lt;&lt;&#39;任意字符&#39;另起一行可以输入任意字符在变量中，结束后另起一行输入刚刚的’任意字符’做结尾即可定界； 字符串函数strlen用于测定一个变量的长度；如：echo strlen($被测变量) mb_strlen($被测字符)可测定宽字符； 函数 trim删除对象变量两端的字符(如空格、“”等)，可以在后面加charlist：&#39;增加的删除值&#39;，只删右边rtrim,只删左边ltrim trim($目标变量,charlist:&#39;增加的删除值&#39;) 函数stroupper全改大写 函数ucfirst&amp;ucwords把首字母改大写&amp;把每个首字母都大写 函数md5将目标编译哈希为十六进制32位的不可逆字符串 函数explode拆分目标，成为数组（也可查明后缀） 函数implode合成目标 函数substr截断字符串如`substr($目标,start:起始在第几个，lenghth:结束在第几个) 数据类型String（字符串）, Integer（整型）, Float（浮点型）, Boolean（布尔型）, Array（数组）, Object（对象）, NULL（空值） 与C语言类似 PHP 类型比较虽然 PHP 是弱类型语言，但也需要明白变量类型及它们的意义，因为我们经常需要对 PHP 变量进行比较，包含松散和严格比较。 松散比较：使用两个等号 == 比较，只比较值，不比较类型。 严格比较：用三个等号 === 比较，除了比较值，也比较类型 常量常量是一个简单值的标识符。常量值被定义后该值在脚本中不能改变。 一个常量由英文字母、下划线、和数字组成,但数字不能作为首字母出现。 (常量名不需要加 $ 修饰符)。 注意： 常量在整个脚本中都可以使用。 设置常量，使用 define() 函数，函数语法如下： 1bool define ( string $name , mixed $value [, bool $case_insensitive = false ] ) 该函数有三个参数: name：必选参数，常量名称，即标志符。 value：必选参数，常量的值。 case_insensitive ：可选参数，如果设置为 TRUE，该常量则大小写不敏感。默认是大小写敏感的。 条件语句当编写代码时，常常需要为不同的判断执行不同的动作。可以在代码中使用条件语句来完成此任务。 在 PHP 中，提供了下列条件语句： if 语句 语句用于仅当指定条件成立时执行代码。 语法 1234if (条件)&#123; 条件成立时要执行的代码;&#125; if…else 语句 在条件成立时执行一块代码，条件不成立时执行另一块代码，使用 if….else 语句。 语法 12345678if (*条件*)&#123;*条件成立时执行的代码;*&#125;else&#123;*条件不成立时执行的代码;*&#125; if…elseif….else 语句 在若干条件之一成立时执行一个代码块，使用 if….elseif…else 语句。. 语法 123456789101112if (条件)&#123; if 条件成立时执行的代码;&#125;elseif (条件)&#123; elseif 条件成立时执行的代码;&#125;else&#123; 条件不成立时执行的代码;&#125; switch 语句 - 在若干条件之一成立时执行一个代码块 有选择地执行若干代码块之一，使用 switch 语句。 工作原理：首先对一个简单的表达式 n（通常是变量）进行一次计算。将表达式的值与结构中每个 case 的值进行比较。如果存在匹配，则执行与 case 关联的代码。代码执行后，使用 break 来阻止代码跳入下一个 case 中继续执行。default 语句用于不存在匹配（即没有 case 为真）时执行。 语法 12345678910111213&lt;?phpswitch (n)&#123;case label1: 如果 n=label1，此处代码将执行; break;case label2: 如果 n=label2，此处代码将执行; break;default: 如果 n 既不等于 label1 也不等于 label2，此处代码将执行;&#125;?&gt; 数组 数组是一个能在单个变量中存储多个值的特殊变量，并且可以根据键访问其中的值 在 PHP 中，array() 函数用于创建数组： 在 PHP 中，有三种类型的数组： 数值数组 - 带有数字 ID 键的数组 这里有两种创建数值数组的方法： 自动分配 ID 键（ID 键总是从 0 开始）如： $cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;); 人工分配 ID 键如： $cars[0]=&quot;Volvo&quot;; $cars[1]=&quot;BMW&quot;; $cars[2]=&quot;Toyota&quot;; 关联数组 - 带有指定的键的数组，每个键关联一个值 关联数组是使用您分配给数组的指定的键的数组。 这里有两种创建关联数组的方法,如： $age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;); or: $age[&#39;Peter&#39;]=&quot;35&quot;; $age[&#39;Ben&#39;]=&quot;37&quot;; $age[&#39;Joe&#39;]=&quot;43&quot;; 多维数组 - 包含一个或多个数组的数组 数组排序函数 sort() - 对数组进行升序排列:元素按照字母升序排列 rsort() - 对数组进行降序排列:数组中的元素按照字母降序排列 asort() - 根据关联数组的值，对数组进行升序排列 ksort() - 根据关联数组的键，对数组进行升序排列 arsort() - 根据关联数组的值，对数组进行降序排列 krsort() - 根据关联数组的键，对数组进行降序排列 循环语句编写代码时，需要让相同的代码块一次又一次地重复运行，在代码中使用循环语句来完成这个任务。 在 PHP 中，提供了下列循环语句： while - 只要指定的条件成立，则循环执行代码块 while 循环将重复执行代码块，直到指定的条件不成立。 语法 1234while (条件)&#123; 要执行的代码;&#125; do…while - 首先执行一次代码块，然后在指定的条件成立时重复这个循环 语法 12345do&#123; 要执行的代码;&#125;while (条件); for - 循环执行代码块指定的次数 语法 1234for (初始值; 条件; 增量)&#123; 要执行的代码;&#125; 参数： 初始值：主要是初始化一个变量值，用于设置一个计数器（但可以是任何在循环的开始被执行一次的代码）。 条件：循环执行的限制条件。如果为 TRUE，则循环继续。如果为 FALSE，则循环结束。 增量：主要用于递增计数器（但可以是任何在循环的结束被执行的代码）。 注释：上面的初始值和增量参数可为空，或者有多个表达式（用逗号分隔）。 foreach - 根据数组中每个元素来循环代码块，用于遍历数组 语法 1234foreach ($array as $value)&#123; 要执行代码;&#125; 每进行一次循环，当前数组元素的值就会被赋值给 $value 变量（数组指针会逐一地移动），在进行下一次循环时，您将看到数组中的下一个值。 1234foreach ($array as $key =&gt; $value)&#123; 要执行代码;&#125; 每一次循环，当前数组元素的键与值就都会被赋值给 $key 和 $value 变量（数字指针会逐一地移动），在进行下一次循环时，你将看到数组中的下一个键与值 创建函数函数是通过调用函数来执行的。 你可以在页面的任何位置调用函数。 创建语法 123456&lt;?phpfunction functionName()&#123; // 要执行的代码&#125;?&gt; PHP 函数准则： 函数的名称应该提示出它的功能 函数名称以字母或下划线开头（不能以数字开头） 添加参数 为了给函数添加更多的功能，我们可以添加参数，参数类似变量。 参数就在函数名称后面的一个括号内指定。 实例 下面的实例将输出不同的名字，但姓是相同的： 1234567891011121314151617&lt;?phpfunction writeName($fname)&#123; echo $fname . &quot; Refsnes.&lt;br&gt;&quot;;&#125; echo &quot;My name is &quot;;writeName(&quot;Kai Jim&quot;);echo &quot;My sister&#x27;s name is &quot;;writeName(&quot;Hege&quot;);echo &quot;My brother&#x27;s name is &quot;;writeName(&quot;Stale&quot;);?&gt;输出My name is Kai Jim Refsnes.My sister&#x27;s name is Hege Refsnes.My brother&#x27;s name is Stale Refsnes. 返回值 如需让函数返回一个值，请使用 return 语句。 实例 1234567891011&lt;?phpfunction add($x,$y)&#123; $total=$x+$y; return $total;&#125; echo &quot;1 + 16 = &quot; . add(1,16);?&gt;输出1 + 16 = 17 未完待续","categories":[],"tags":[{"name":"小白 学习","slug":"小白-学习","permalink":"http://example.com/tags/%E5%B0%8F%E7%99%BD-%E5%AD%A6%E4%B9%A0/"}]},{"title":"Linux学习笔记","slug":"Linux基础命令学习笔记","date":"2021-10-05T12:04:37.000Z","updated":"2021-10-14T13:13:46.225Z","comments":true,"path":"2021/10/05/Linux基础命令学习笔记/","link":"","permalink":"http://example.com/2021/10/05/Linux%E5%9F%BA%E7%A1%80%E5%91%BD%E4%BB%A4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/","excerpt":"","text":"Linux基础命令学习笔记前言：这是一个小白从零开始学习Linux的指令，其中包含个人的理解，如有错误还望指出。在此贴出参考学习的博客https://blog.csdn.net/qq_23329167/article/details/83856430/ https://www.runoob.com/w3cnote/linux-common-command-2.html https://blog.csdn.net/yangzongjie/article/details/78976495 第一天： cd （Change Directory）进入头的命令是指进入目录，格式：cd+空格+进入的目录名。 注：在各种计算机语言中，目录名的表示方法都是名字+/ （待考证） ls （LiSt）查看通过 ls 命令不仅可以查看 linux 文件夹包含的文件，而且可以查看文件权(包括目录、文件夹、文件权限)查看目录信息等等。 常用参数 1234567ls -a 列出目录所有文件，包含以.开始的隐藏文件ls -A 列出除.及..的其它文件ls -r 反序排列ls -t 以文件修改时间排序ls -S 以文件大小排序ls -h 以易读大小显示ls -l 除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来 pwd （Print Working Directory）头的命令是指查看当前工作目录，可加装升级为pwd -P查看软链接的实际路径。 mkdir（MaKe DIRectory）头指创建新的文件夹，目录。 touch创建新文件 vi或vim 编辑文件【vi编辑器的3种模式】 基本上vi可以分为三种状态，分别是命令模式（command mode）、插入模式（Insert mode）和底行模式（last line mode），各模式的功能区分如下： 命令行模式command mode） 控制屏幕光标的移动，字符、字或行的删除，查找，移动复制某区段及进入Insert mode下，或者到 last line mode。 命令行模式下的常用命令： 【1】控制光标移动：↑，↓，j 【2】删除当前行：dd 【3】查找：/字符 【4】进入编辑模式：i o a 【5】进入底行模式：: 编辑模式（Insert mode） 只有在Insert mode下，才可以做文字输入，按「ESC」键可回到命令行模式。 编辑模式下常用命令： 【1】ESC 退出编辑模式到命令行模式； 底行模式（last line mode） 将文件保存或退出vi，也可以设置编辑环境，如寻找字符串、列出行号……等。 底行模式下常用命令： 【1】退出编辑： :q 【2】强制退出： :q! 【3】保存并退出： :wq 打开文件 命令：vi 文件名示例：打开当前目录下的aa.txt文件 vi aa.txt 或者 vim aa.txt 注意：使用vi编辑器打开文件后，并不能编辑，因为此时处于命令模式，点击键盘i/a/o进入编辑模式。 编辑文件 使用vi编辑器打开文件后点击按键：i ，a或者o即可进入编辑模式。 i:在光标所在字符前开始插入a:在光标所在字符后开始插入o:在光标所在行的下面另起一新行插入 保存或者取消编辑 保存文件： 第一步：ESC 进入命令行模式第二步：: 进入底行模式第三步：wq 保存并退出编辑 取消编辑： 第一步：ESC 进入命令行模式第二步：: 进入底行模式第三步：q! 撤销本次修改并退出编辑 rm（ ReMove）删除，常用参数 （1）删除任何 .log 文件，删除前逐一询问确认： 1rm -i *.log （2）删除 test 子目录及子目录中所有档案删除，并且不用一一确认： 1rm -rf test （3）删除以 -f 开头的文件 1rm -- -f* mv（move）移动文件，同时有重命名、覆盖的作用 （1）将文件 test.log 重命名为 test1.txt 1mv test.log test1.txt （2）将文件 log1.txt,log2.txt,log3.txt 移动到根的 test3 目录中 1mv llog1.txt log2.txt log3.txt /test3 （3）将文件 file1 改名为 file2，如果 file2 已经存在，则询问是否覆盖 1mv -i log1.txt log2.txt （4）移动当前文件夹下的所有文件到上一级目录 1mv * ../ cp (copy)复制 常用参数 123-i 提示-r 复制目录及目录内所有项目-a 复制的文件与原文件时间一样 df (Disk Free) 显示磁盘空间使用情况 常用参数 123456-a 全部文件系统列表-h 以方便阅读的方式显示信息-i 显示inode信息-k 区块为1024字节-l 只显示本地磁盘-T 列出文件系统类型 find 查找 常用参数 123456789101112131415161718192021222324252627pathname: find命令所查找的目录路径。例如用.来表示当前目录，用/来表示系统根目录。-print： find命令将匹配的文件输出到标准输出。-exec： find命令对匹配的文件执行该参数所给出的shell命令。相应命令的形式为&#x27;command&#x27; &#123; &#125; \\;，注意&#123; &#125;和\\；之间的空格。-ok： 和-exec的作用相同，只不过以一种更为安全的模式来执行该参数所给出的shell命令，在执行每一个命令之前，都会给出提示，让用户来确定是否执行。-name 按照文件名查找文件-perm 按文件权限查找文件-user 按文件属主查找文件-group 按照文件所属的组来查找文件。-type 查找某一类型的文件，诸如： b - 块设备文件 d - 目录 c - 字符设备文件 l - 符号链接文件 p - 管道文件 f - 普通文件-size n :[c] 查找文件长度为n块文件，带有c时表文件字节大小-amin n 查找系统中最后N分钟访问的文件-atime n 查找系统中最后n*24小时访问的文件-cmin n 查找系统中最后N分钟被改变文件状态的文件-ctime n 查找系统中最后n*24小时被改变文件状态的文件-mmin n 查找系统中最后N分钟被改变文件数据的文件-mtime n 查找系统中最后n*24小时被改变文件数据的文件(用减号-来限定更改时间在距今n日以内的文件，而用加号+来限定更改时间在距今n日以前的文件。 )-maxdepth n 最大查找目录深度-prune 选项来指出需要忽略的目录。在使用-prune选项时要当心，因为如果你同时使用了-depth选项，那么-prune选项就会被find命令忽略-newer 如果希望查找更改时间比某个文件新但比另一个文件旧的所有文件，可以使用-newer选项 查看：cat、more、less 目标对象是各种具体文件的内容，三种方式各有不同点。 (1) cat cat 主要有三大功能： &lt;1&gt;一次显示整个文件: 1cat filename &lt;2&gt;从键盘创建一个文件: 1cat &gt; filename 只能创建新文件，不能编辑已有文件。 &lt;3&gt;将几个文件合并为一个文件: 1cat file1 file2 &gt; file -b 对非空输出行号 -n 输出所有行号 (2) more 命令参数： 123456789+n 从笫 n 行开始显示-n 定义屏幕大小为n行+/pattern 在每个档案显示前搜寻该字串（pattern），然后从该字串前两行之后开始显示 -c 从顶部清屏，然后显示-d 提示“Press space to continue，’q’ to quit（按空格键继续，按q键退出）”，禁用响铃功能-l 忽略Ctrl+l（换页）字符-p 通过清除窗口而不是滚屏来对文件进行换页，与-c选项相似-s 把连续的多个空行显示为一行-u 把文件内容中的下画线去掉 常用操作命令： 123456789Enter 向下 n 行，需要定义。默认为 1 行Ctrl+F 向下滚动一屏空格键 向下滚动一屏Ctrl+B 返回上一屏= 输出当前行的行号:f 输出文件名和当前行的行号V 调用vi编辑器!命令 调用Shell，并执行命令q 退出more (3) less less 与 more 类似，但使用 less 可以随意浏览文件，而 more 仅能向前移动，却不能向后移动，而且 less 在查看之前不会加载整个文件。 常用命令参数： 12345678910111213141516171819-i 忽略搜索时的大小写-N 显示每行的行号-o &lt;文件名&gt; 将less 输出的内容在指定文件中保存起来-s 显示连续空行为一行/字符串：向下搜索“字符串”的功能?字符串：向上搜索“字符串”的功能n：重复前一个搜索（与 / 或 ? 有关）N：反向重复前一个搜索（与 / 或 ? 有关）-x &lt;数字&gt; 将“tab”键显示为规定的数字空格b 向后翻一页d 向后翻半页h 显示帮助界面Q 退出less 命令u 向前滚动半页y 向前滚动一行空格键 滚动一行回车键 滚动一页[pagedown]： 向下翻动一页[pageup]： 向上翻动一页 which （斯以为与find差不多，待尝试） 经Ubuntu实验，which用于查找命令是否存在及其路径（差远了….. 实践是检验真理的唯一标准） 关机与重启 关机 shutdown -h now 立刻关机 shutdown -h 5 5分钟后关机 poweroff 立刻关机重启 shutdown -r now 立刻重启 shutdown -r 5 5分钟后重启 reboot 立刻重启 第二天 head head 用来显示档案的开头至标准输出中，默认 head 命令打印其相应文件的开头 10 行。 (不是特别懂在说什么) tail 于显示指定文件末尾内容，不指定文件时，作为输入信息进行处理。常用查看日志文件。 (同样不是很懂是干什么的) whereis 同样是用来搜索，只能用于程序名的搜索，而且只搜索二进制文件（参数-b）、man说明文件（参数-m）和源代码文件（参数-s）。如果省略参数，则返回所有信息。whereis 及 locate 都是基于系统内建的数据库进行搜索，因此效率很高，而find则是遍历硬盘查找文件。(效率高) 常用参数： 1234-b 定位可执行文件。-m 定位帮助文件。-s 定位源代码文件。-u 搜索默认路径下除可执行文件、源代码文件、帮助文件以外的其它文件。 locate 用于在数据库中搜索，使用前先使用updatedb命令，手动更新数据库，具体原理如下(还不是特别懂） ocate 通过搜寻系统内建文档数据库达到快速找到档案，数据库由 updatedb 程序来更新，updatedb 是由 cron daemon 周期性调用的。默认情况下 locate 命令在搜寻数据库时比由整个由硬盘资料来搜寻资料来得快，但较差劲的是 locate 所找到的档案若是最近才建立或 刚更名的，可能会找不到 ​ 常用参数： 123-l num（要显示的行数）-f 将特定的档案系统排除在外，如将proc排除在外-r 使用正则运算式做为寻找条件 chmod 用于改变 linux 系统文件或目录的访问权限。用它控制文件或目录的访问权限。该命令有两种用法。一种是包含字母和操作符表达式的文字设定法；另一种是包含数字的数字设定法。 每一文件或目录的访问权限都有三组，每组用三位表示，分别为文件属主的读、写和执行权限；与属主同组的用户的读、写和执行权限；系统中其他用户的读、写和执行权限。可使用 ls -l test.txt 查找。 以文件 log2012.log 为例： 1-rw-r--r-- 1 root root 296K 11-13 06:03 log2012.log 第一列共有 10 个位置，第一个字符指定了文件类型。在通常意义上，一个目录也是一个文件。如果第一个字符是横线，表示是一个非目录的文件。如果是 d，表示是一个目录。从第二个字符开始到第十个 9 个字符，3 个字符一组，分别表示了 3 组用户对文件或者目录的权限。权限字符用横线代表空许可，r 代表只读，w 代表写，x 代表可执行。 常用参数： 12-c 当发生改变时，报告处理信息-R 处理指定目录以及其子目录下所有文件 权限范围： 1234u ：目录或者文件的当前的用户g ：目录或者文件的当前的群组o ：除了目录或者文件的当前用户或群组之外的用户或者群组a ：所有的用户及群组 权限代号： 12345r ：读权限，用数字4表示w ：写权限，用数字2表示x ：执行权限，用数字1表示- ：删除权限，用数字0表示s ：特殊权限 实例： （1）增加文件 t.log 所有用户可执行权限 1chmod a+x t.log （2）撤销原来所有的权限，然后使拥有者具有可读权限,并输出处理信息 1chmod u=r t.log -c （3）给 file 的属主分配读、写、执行(7)的权限，给file的所在组分配读、执行(5)的权限，给其他用户分配执行(1)的权限 1chmod 751 t.log -c（或者：chmod u=rwx,g=rx,o=x t.log -c) （4）将 test 目录及其子目录所有文件添加可读权限 1chmod u+r,g+r,o+r -R text/ -c tar 用来压缩和解压文件(待实验) tar 本身不具有压缩功能，只具有打包功能，有关压缩及解压是调用其它的功能来完成。 弄清两个概念：打包和压缩。打包是指将一大堆文件或目录变成一个总的文件；压缩则是将一个大的文件通过一些压缩算法变成一个小文件 常用参数： 12345678910-c 建立新的压缩文件-f 指定压缩文件-r 添加文件到已经压缩文件包中-u 添加改了和现有的文件到压缩包中-x 从压缩包中抽取文件-t 显示压缩文件中的内容-z 支持gzip压缩-j 支持bzip2压缩-Z 支持compress解压文件-v 显示操作过程 有关 gzip 及 bzip2 压缩: 12345gzip 实例：压缩 gzip fileName .tar.gz 和.tgz 解压：gunzip filename.gz 或 gzip -d filename.gz 对应：tar zcvf filename.tar.gz tar zxvf filename.tar.gzbz2实例：压缩 bzip2 -z filename .tar.bz2 解压：bunzip filename.bz2或bzip -d filename.bz2 对应：tar jcvf filename.tar.gz 解压：tar jxvf filename.tar.bz2 常用压缩后缀：-zcvf 示例：打包并压缩/usr/tmp 下的所有文件 压缩后的压缩包指定名称为xxx.tar tar -zcvf ab.tar aa.txt bb.txt 常用解压后缀：-zxvf 示例：将/usr/tmp 下的ab.tar解压到根目录/usr下 tar -xvf ab.tar -C /usr——C代表指定解压的位置 chown 更改权限待实践) chown 将指定文件的拥有者改为指定的用户或组，用户可以是用户名或者用户 ID；组可以是组名或者组 ID；文件是以空格分开的要改变权限的文件列表，支持通配符。 12-c 显示更改的部分的信息-R 处理指定目录及子目录 实例： （1）改变拥有者和群组 并显示改变信息 1chown -c mail:mail log2012.log （2）改变文件群组 1chown -c :mail t.log （3）改变文件夹及子文件目录属主及属组为 mail 1chown -cR mail: test/ du ​ du 命令也是查看使用空间的，但是与 df 命令不同的是 Linux du 命令是对文件和目录磁盘使用的空间的查看： 命令格式： 1du [选项] [文件] 常用参数： 1234567-a 显示目录中所有文件大小-k 以KB为单位显示文件大小-m 以MB为单位显示文件大小-g 以GB为单位显示文件大小-h 以易读方式显示文件大小-s 仅显示总计-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和 date显示或设定系统的日期与时间。 命令参数： 123456789101112131415-d&lt;字符串&gt; 显示字符串所指的日期与时间。字符串前后必须加上双引号。-s&lt;字符串&gt; 根据字符串来设置日期与时间。字符串前后必须加上双引号。-u 显示GMT。%H 小时(00-23)%I 小时(00-12)%M 分钟(以00-59来表示)%s 总秒数。起算时间为1970-01-01 00:00:00 UTC。%S 秒(以本地的惯用法来表示)%a 星期的缩写。%A 星期的完整名称。%d 日期(以01-31来表示)。%D 日期(含年月日)。%m 月份(以01-12来表示)。%y 年份(以00-99来表示)。%Y 年份(以四位数来表示)。 ps (Processes Status) 查看所有正在运行的进程ps(process status)，用来查看当前运行的进程状态，一次性查看，如果需要动态连续结果使用 top linux上进程有5种状态: \\1. 运行(正在运行或在运行队列中等待) \\2. 中断(休眠中, 受阻, 在等待某个条件的形成或接受到信号) \\3. 不可中断(收到信号不唤醒和不可运行, 进程必须等待直到有中断发生) \\4. 僵死(进程已终止, 但进程描述符存在, 直到父进程调用wait4()系统调用后释放) \\5. 停止(进程收到SIGSTOP, SIGSTP, SIGTIN, SIGTOU信号后停止运行运行) ps 工具标识进程的5种状态码: 12345D 不可中断 uninterruptible sleep (usually IO)R 运行 runnable (on run queue)S 中断 sleepingT 停止 traced or stoppedZ 僵死 a defunct (”zombie”) process 命令参数： 12345678-A 显示所有进程a 显示所有进程-a 显示同一终端下所有进程c 显示进程真实名称e 显示环境变量f 显示进程间的关系r 显示当前终端运行的进程-aux 显示所有包含其它使用的进程 常用：ps -ef kill 结束进程kill pid 或者 kill -9 pid(强制杀死进程) pid:进程号 free显示系统内存使用情况，包括物理内存、交互区内存(swap)和内核缓冲区内存。 基本完结，未完待续","categories":[],"tags":[{"name":"小白 Linux 学习","slug":"小白-Linux-学习","permalink":"http://example.com/tags/%E5%B0%8F%E7%99%BD-Linux-%E5%AD%A6%E4%B9%A0/"}]},{"title":"我的第一篇博客（实验机）","slug":"我的第一篇博客（实验机）","date":"2021-10-03T07:23:16.000Z","updated":"2021-10-03T09:49:01.045Z","comments":true,"path":"2021/10/03/我的第一篇博客（实验机）/","link":"","permalink":"http://example.com/2021/10/03/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2%EF%BC%88%E5%AE%9E%E9%AA%8C%E6%9C%BA%EF%BC%89/","excerpt":"","text":"实验产物测试 测试 测试 测试 这不是测试 这是引用的测试 引用中的引用 markdown语法 *测试 测试 测试 测试 一.嵌套测试 测试 表格测试 表头 表头2 表头3 内容 结尾：markdown真好用","categories":[],"tags":[{"name":"小白","slug":"小白","permalink":"http://example.com/tags/%E5%B0%8F%E7%99%BD/"}]},{"title":"Hello World","slug":"hello-world","date":"2021-10-02T10:49:30.392Z","updated":"2021-10-02T10:49:30.393Z","comments":true,"path":"2021/10/02/hello-world/","link":"","permalink":"http://example.com/2021/10/02/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[{"name":"小白 学习","slug":"小白-学习","permalink":"http://example.com/tags/%E5%B0%8F%E7%99%BD-%E5%AD%A6%E4%B9%A0/"},{"name":"小白 Linux 学习","slug":"小白-Linux-学习","permalink":"http://example.com/tags/%E5%B0%8F%E7%99%BD-Linux-%E5%AD%A6%E4%B9%A0/"},{"name":"小白","slug":"小白","permalink":"http://example.com/tags/%E5%B0%8F%E7%99%BD/"}]}